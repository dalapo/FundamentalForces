buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradleVersion}", changing: false
        classpath "org.spongepowered:mixingradle:${mixingradleVersion}"
        classpath "org.parchmentmc:librarian:${librarianVersion}"
    }

}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

jarJar.enable()

version = "${project.minecraftVersion}-${project.modVersion}"
if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}
group = "team.lodestar.${project.modId}"
archivesBaseName = project.modId
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${project.modId}.refmap.json"
}

minecraft {
    mappings channel: 'parchment', version: "${parchmentVersion}-${minecraftVersion}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=" + archivesBaseName + ".mixins.json"

            mods {
                self {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=" + archivesBaseName + ".mixins.json"

            mods {
                self {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', "${project.modId}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                self {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name 'Curios maven'
        url "https://maven.theillusivec4.top/"
    }

    maven {
        name 'JEI maven'
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { url 'https://maven.blamejared.com/' }
    maven {
        name = "Curse Maven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name "Moonflower Maven"
        url "https://repo.moonflower.gg/releases"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraftVersion}-${project.forgeVersion}"

    // Use this to make sure it functions in the intellij environment
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:${mixinVersion}:processor"
    }

    // JEI Dependency
    compileOnly fg.deobf("mezz.jei:jei-${minecraftVersion}-forge-api:${jeiVersion}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraftVersion}-common-api:${jeiVersion}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraftVersion}-forge:${jeiVersion}")

    // Curios dependency
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraftVersion}-${curiosVersion}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraftVersion}-${curiosVersion}")

    // Pollen dependency
//    implementation fg.deobf("gg.moonflower:pollen-forge:${pollenVersion}+${minecraftVersion}") {
//        transitive = false
//    }

    // Registrate dependency
    jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: '[MC1.19-1.1.5,)') {
        jarJar.pin(it, project.registrateVersion)
    }
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrateVersion}")

//    implementation fg.deobf("team.lodestar.lodestone:lodestone:${minecraftVersion}-${project.lodestoneVersion}")
    implementation fg.deobf("team.lodestar.sage:sage:${minecraftVersion}-${project.sageVersion}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Fundamental Forces",
                "Specification-Vendor"    : "Lodestar",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Lodestar",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${project.modId}.mixins.json"
        ])
    }
}

// Workaround for SpongePowered/MixinGradle#38
afterEvaluate {
    tasks.configureReobfTaskForReobfJar.mustRunAfter(tasks.compileJava)
    tasks.configureReobfTaskForReobfJarJar.mustRunAfter(tasks.compileJava)
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

task jarJarRelease {
    doLast {
        tasks.jarJar {
            classifier = ''
        }
    }
    finalizedBy tasks.jarJar
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar.finalizedBy('reobfJar')
tasks.jarJar.finalizedBy('reobfJarJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


